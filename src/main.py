import os
from fastapi import FastAPI, HTTPException, status as fastapi_status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import base64 

from .service import ReconciliationActService, ServiceInitialize
from .schemas import ( 
    ProcessIdResponse,
    ProcessStatus, 
    ReconciliationActResponseModel, 
    StatusResponseModel,
    ReconciliationActRequestModel,
    ProcessStatusRequest,
    FillReconciliationActRequestModel
)
from .config import AppConfig

from contextlib import asynccontextmanager

reconciliation_service: ReconciliationActService = None
app_config: AppConfig = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global reconciliation_service
    
    print("üöÄ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    ServiceInitialize.initialize()
    reconciliation_service = ReconciliationActService()
    print("‚úÖ ReconciliationActService —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    yield
    
    print("üõë FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    if reconciliation_service:
        reconciliation_service.shutdown()

def create_app(config: AppConfig) -> FastAPI:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    global app_config
    app_config = config
    
    # –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = FastAPI(
        lifespan=lifespan,
        title=config.api.title,
        description=config.api.description,
        version=config.api.version,
        docs_url=config.api.docs_url,
        redoc_url=config.api.redoc_url,
    )
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=config.security.allowed_origins,
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    
    return app

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_app():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è uvicorn"""
    from .config import config_manager
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π start.py
    environment = os.getenv('_RECON_CONFIG_ENVIRONMENT') or os.getenv('ENVIRONMENT', 'development')
    config = config_manager.load_config(environment)
    return create_app(config)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
app = get_app()

# –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã API
@app.get("/")
async def read_root():
    return {"message": "Reconciliation Act Service is running"}

@app.post("/send_reconciliation_act",
            status_code=fastapi_status.HTTP_201_CREATED, 
            response_model=ProcessIdResponse)
async def handle_send_reconciliation_act(input_data: ReconciliationActRequestModel):
    """ –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏, –ø—Ä–∏–Ω–∏–º–∞—è PDF –≤ base64. """
    try:
        try:
            pdf_bytes = base64.b64decode(input_data.document)
        except base64.binascii.Error as e:
            reconciliation_service.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: {e}")
            raise HTTPException(status_code=fastapi_status.HTTP_400_BAD_REQUEST, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç base64.")
        
        process_id = reconciliation_service.send_reconciliation_act(pdf_bytes=pdf_bytes)
        return ProcessIdResponse(process_id=process_id) 
    except HTTPException:
        raise
    except Exception as e:
        reconciliation_service.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ send_reconciliation_act: {e}", exc_info=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ StatusResponseModel, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ, –∏–ª–∏ –æ–±—â—É—é –æ—à–∏–±–∫—É
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Å–∞–º –≤—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞ –ø–∞–¥–∞–µ—Ç, —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        raise HTTPException(status_code=fastapi_status.HTTP_500_INTERNAL_SERVER_ERROR, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")

@app.post("/fill_reconciliation_act", response_class=JSONResponse)
async def handle_fill_reconciliation_act(input_data: FillReconciliationActRequestModel):
    """
    –ó–∞–ø–æ–ª–Ω—è–µ—Ç –∞–∫—Ç —Å–≤–µ—Ä–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (debit/credit).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç PDF –≤ base64.
    """
    try:
        filled_pdf_bytes = reconciliation_service.fill_reconciliation_act(input_data)
        filled_pdf_b64 = base64.b64encode(filled_pdf_bytes).decode("utf-8")
        return {"document": filled_pdf_b64}
    except Exception as e:
        reconciliation_service.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏: {e}", exc_info=True)
        raise HTTPException(status_code=fastapi_status.HTTP_500_INTERNAL_SERVER_ERROR, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏.")



@app.post("/process_status",
            # response_model –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ä–∞–∑–Ω—ã–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
            responses={ 
                fastapi_status.HTTP_200_OK: {"model": ReconciliationActResponseModel, "description": "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Å—Ç–∞—Ç—É—Å 1)"},
                fastapi_status.HTTP_201_CREATED: {"model": StatusResponseModel, "description": "–î–æ–∫—É–º–µ–Ω—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ (—Å—Ç–∞—Ç—É—Å 0)"},
                fastapi_status.HTTP_404_NOT_FOUND: {"model": StatusResponseModel, "description": "–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω (—Å—Ç–∞—Ç—É—Å -1)"},
                fastapi_status.HTTP_500_INTERNAL_SERVER_ERROR: {"model": StatusResponseModel, "description": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å—Ç–∞—Ç—É—Å -2)"}
            }) 
async def handle_get_process_status(input_data: ProcessStatusRequest):
    process_id = input_data.process_id
    
    try:
        response_dict = reconciliation_service.get_process_status(process_id)
        service_status_value = response_dict.get('status')

        # –°–æ–≥–ª–∞—Å–Ω–æ –æ–ø–∏—Å–∞–Ω–∏—é API:
        # status 0 (WAIT) -> HTTP 201
        # status 1 (DONE) -> HTTP 200
        # status -1 (NOT_FOUND) -> HTTP 404
        # status -2 (ERROR) -> HTTP 500

        if service_status_value == ProcessStatus.DONE.value: # status: 1
            # response_dict –∑–¥–µ—Å—å —ç—Ç–æ ReconciliationActResponseModel.model_dump()
            return JSONResponse(content=response_dict, status_code=fastapi_status.HTTP_200_OK)
        
        elif service_status_value == ProcessStatus.WAIT.value: # status: 0
            # response_dict –∑–¥–µ—Å—å —ç—Ç–æ StatusResponseModel.model_dump() —Å message="wait"
            return JSONResponse(content=response_dict, status_code=fastapi_status.HTTP_201_CREATED)
        
        elif service_status_value == ProcessStatus.NOT_FOUND.value: # status: -1
            # response_dict –∑–¥–µ—Å—å —ç—Ç–æ StatusResponseModel.model_dump() —Å message="not found"
            # –í–∞–∂–Ω–æ: FastAPI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç detail –≤ JSON, –µ—Å–ª–∏ —ç—Ç–æ dict –∏–ª–∏ Pydantic –º–æ–¥–µ–ª—å
            raise HTTPException(status_code=fastapi_status.HTTP_404_NOT_FOUND, detail=response_dict)
        
        elif service_status_value == ProcessStatus.ERROR.value: # status: -2
            # response_dict –∑–¥–µ—Å—å —ç—Ç–æ StatusResponseModel.model_dump() —Å message="ERROR_DESCRIPTION"
            raise HTTPException(status_code=fastapi_status.HTTP_500_INTERNAL_SERVER_ERROR, detail=response_dict)
        
        else:
            reconciliation_service.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π service_status_value {service_status_value} –æ—Ç get_process_status –¥–ª—è ID {process_id}")
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π StatusResponseModel –¥–ª—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
            error_detail = StatusResponseModel(status=ProcessStatus.ERROR.value, message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ—Ç —Å–µ—Ä–≤–∏—Å–∞.").model_dump()
            raise HTTPException(status_code=fastapi_status.HTTP_500_INTERNAL_SERVER_ERROR, detail=error_detail)

    except HTTPException: # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º HTTPException, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ –æ–±—â–∏–π Exception handler –Ω–∏–∂–µ
        raise
    except Exception as e:
        reconciliation_service.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ /process_status –¥–ª—è ID {process_id}: {e}", exc_info=True)
        # –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –¥–æ –≤—ã–∑–æ–≤–∞ —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ –ø—Ä–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
        error_detail = StatusResponseModel(status=ProcessStatus.ERROR.value, message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—Ç–∞—Ç—É—Å–∞.").model_dump()
        raise HTTPException(status_code=fastapi_status.HTTP_500_INTERNAL_SERVER_ERROR, detail=error_detail)



