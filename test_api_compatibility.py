"""
–¢–µ—Å—Ç v2 –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ API
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from src.v2.domain.value_objects.process_id import ProcessId
from src.v2.domain.value_objects.organization import Organization
from src.v2.domain.value_objects.period import Period
from src.v2.domain.value_objects.act_entry import ActEntry, RowIdentifier
from src.v2.domain.entities.process import ReconciliationProcess, DocumentStructure
from src.v2.domain.enums.process_status import ProcessStatus

def test_api_compatibility():
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å API ===")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    process_id = ProcessId.generate()
    process = ReconciliationProcess.create(process_id)
    print(f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ü–µ—Å—Å: {process}")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ –≤ API
    seller = Organization(name="–û–û–û –ü—Ä–æ–¥–∞–≤–µ—Ü", role="–ø—Ä–æ–¥–∞–≤–µ—Ü")
    buyer = Organization(name="–û–û–û –ü–æ–∫—É–ø–∞—Ç–µ–ª—å", role="–ø–æ–∫—É–ø–∞—Ç–µ–ª—å")
    print(f"–ü—Ä–æ–¥–∞–≤–µ—Ü: {seller}")
    print(f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∫–∞–∫ –≤ API
    period = Period(from_date="01.01.2024", to_date="31.03.2024")
    print(f"–ü–µ—Ä–∏–æ–¥: {period}")
    print(f"API dict: {period.to_api_dict()}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –∫–∞–∫ –≤ API
    debit_entry = ActEntry(
        row_identifier=RowIdentifier(table_id=0, row_id=1),
        record="–ü–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤",
        value=1000.50,
        date="15.01.2024"
    )
    
    credit_entry = ActEntry(
        row_identifier=RowIdentifier(table_id=0, row_id=2),
        record="–û–ø–ª–∞—Ç–∞ –∑–∞ —Ç–æ–≤–∞—Ä—ã",
        value=1000.50,
        date="20.01.2024"
    )
    
    print(f"–î–µ–±–µ—Ç: {debit_entry}")
    print(f"–ö—Ä–µ–¥–∏—Ç: {credit_entry}")
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    document_structure = DocumentStructure(
        pdf_bytes=b"fake_pdf_content",
        tables=[],
        metadata={}
    )
    
    process.complete_processing(
        seller=seller,
        buyer=buyer,
        period=period,
        debit_entries=[debit_entry],
        credit_entries=[credit_entry],
        document_structure=document_structure
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    print(f"\n–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞: {process.status}")
    print(f"–ó–∞–≤–µ—Ä—à–µ–Ω: {process.is_completed()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –æ—Ç–≤–µ—Ç
    api_response = process.to_status_response()
    print(f"\nAPI –æ—Ç–≤–µ—Ç: {api_response}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—ã
    print(f"\n–î–µ–±–µ—Ç –∏—Ç–æ–≥–æ: {process.get_debit_total()}")
    print(f"–ö—Ä–µ–¥–∏—Ç –∏—Ç–æ–≥–æ: {process.get_credit_total()}")
    print(f"–ë–∞–ª–∞–Ω—Å: {process.get_balance()}")
    
    return process

def test_error_handling():
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ ===")
    
    process_id = ProcessId.generate()
    process = ReconciliationProcess.create(process_id)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
    process.mark_as_failed("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–∞–±–ª–∏—Ü—ã –∏–∑ PDF")
    
    print(f"–°—Ç–∞—Ç—É—Å: {process.status}")
    print(f"–û—à–∏–±–∫–∞: {process.error_message}")
    print(f"API –æ—Ç–≤–µ—Ç: {process.to_status_response()}")

if __name__ == "__main__":
    try:
        process = test_api_compatibility()
        test_error_handling()
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ç—É—Å—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç API
        print(f"\nüìä –°—Ç–∞—Ç—É—Å—ã –≤ API:")
        for status in ProcessStatus:
            print(f"  {status.name}: {status.value}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
