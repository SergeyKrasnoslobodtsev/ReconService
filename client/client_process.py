import requests
import base64
import json
import time
from pathlib import Path
from typing import Dict, Any

class ReconServiceClient:
    def __init__(self, base_url: str = "http://127.0.0.1:8000"):
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
    
    def send_pdf(self, pdf_path: str) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PDF —Ñ–∞–π–ª –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç process_id"""
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ PDF —Ñ–∞–π–ª–∞: {pdf_path}")
        
        # –ß–∏—Ç–∞–µ–º PDF —Ñ–∞–π–ª
        with open(pdf_path, 'rb') as f:
            pdf_bytes = f.read()
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        pdf_b64 = base64.b64encode(pdf_bytes).decode('utf-8')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = self.session.post(
            f"{self.base_url}/send_reconciliation_act",
            json={"document": pdf_b64}
        )
        
        if response.status_code == 201:
            process_id = response.json()["process_id"]
            print(f"‚úÖ PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ. Process ID: {process_id}")
            return process_id
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {response.status_code} - {response.text}")
            raise Exception(f"Failed to send PDF: {response.status_code}")
    
    def wait_for_processing(self, process_id: str, timeout: int = 10000) -> Dict[str, Any]:
        """–ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (Process ID: {process_id})")
        
        start_time = time.time()
        poll_interval = 10
        while time.time() - start_time < timeout:
            response = self.session.post(
                f"{self.base_url}/process_status",
                json={"process_id": process_id}
            )
            
            if response.status_code == 200:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
                result = response.json()
                print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                self._print_extraction_results(result)
                return result
            
            elif response.status_code == 201:
                # –î–æ–∫—É–º–µ–Ω—Ç –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
                print(f"‚è≥ –î–æ–∫—É–º–µ–Ω—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ... {response.text}")
                time.sleep(poll_interval)
                continue
            
            elif response.status_code == 404:
                print(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {response.json()}")
                raise Exception("Process not found")
            
            elif response.status_code == 500:
                error_detail = response.json()
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {error_detail}")
                raise Exception(f"Processing error: {error_detail}")
            
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code} - {response.text}")
                raise Exception(f"Unexpected status: {response.status_code}")
        
        raise Exception(f"Timeout: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
    
    def fill_and_get_pdf(self, process_id: str, debit_entries: list, credit_entries: list, output_path: str = None) -> str:
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –∞–∫—Ç —Å–≤–µ—Ä–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        print(f"üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–∫—Ç–∞ —Å–≤–µ—Ä–∫–∏ (Process ID: {process_id})")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        fill_request = {
            "process_id": process_id,
            "debit": debit_entries,
            "credit": credit_entries
        }
        
        print(f"üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(debit_entries)} –∑–∞–ø–∏—Å–µ–π –¥–µ–±–µ—Ç–∞ –∏ {len(credit_entries)} –∑–∞–ø–∏—Å–µ–π –∫—Ä–µ–¥–∏—Ç–∞")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
        response = self.session.post(
            f"{self.base_url}/fill_reconciliation_act",
            json=fill_request
        )
        
        if response.status_code == 200:
            result = response.json()
            filled_pdf_b64 = result["document"]
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º PDF
            filled_pdf_bytes = base64.b64decode(filled_pdf_b64)
            
            if output_path is None:
                output_path = f"filled_document_{process_id[:8]}.pdf"
            
            with open(output_path, 'wb') as f:
                f.write(filled_pdf_bytes)
            
            print(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
            return output_path
        
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {response.status_code} - {response.text}")
            raise Exception(f"Failed to fill document: {response.status_code}")
    
    def _print_extraction_results(self, result: Dict[str, Any]):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"   –ü—Ä–æ–¥–∞–≤–µ—Ü: {result.get('seller', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
        print(f"   –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {result.get('buyer', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
        
        period = result.get('period', {})
        if period:
            print(f"   –ü–µ—Ä–∏–æ–¥: {period.get('from')} - {period.get('to')}")
        
        debit = result.get('debit', [])
        credit = result.get('credit', [])
        print(f"   –ó–∞–ø–∏—Å–µ–π –¥–µ–±–µ—Ç–∞: {len(debit)}")
        print(f"   –ó–∞–ø–∏—Å–µ–π –∫—Ä–µ–¥–∏—Ç–∞: {len(credit)}")
        
        if debit:
            print("   üìà –î–µ–±–µ—Ç (–ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏):")
            for i, entry in enumerate(debit[:3]):
                print(f"      {i+1}. –¢–∞–±–ª–∏—Ü–∞ {entry['row_id']['id_table']}, —Å—Ç—Ä–æ–∫–∞ {entry['row_id']['id_row']}: {entry['value']}")
        
        if credit:
            print("   üìâ –ö—Ä–µ–¥–∏—Ç (–ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏):")
            for i, entry in enumerate(credit[:3]):
                print(f"      {i+1}. –¢–∞–±–ª–∏—Ü–∞ {entry['row_id']['id_table']}, —Å—Ç—Ä–æ–∫–∞ {entry['row_id']['id_row']}: {entry['value']}")
        print()

def process_document(pdf_path: str, server_url: str = "http://127.0.0.1:8000"):
    """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    client = ReconServiceClient(server_url)
    
    try:
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
        process_id = client.send_pdf(pdf_path)
        
        # 2. –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        result = client.wait_for_processing(process_id)
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–µ–±–µ—Ç–∞ –∏ –∫—Ä–µ–¥–∏—Ç–∞
        debit_entries = result.get('debit', [])
        credit_entries = result.get('credit', [])
        
        # 4. –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
        output_path = client.fill_and_get_pdf(process_id, debit_entries, credit_entries)
        
        print(f"üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_path}")
        return output_path
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return None

def modify_values_example(pdf_path: str, server_url: str = "http://127.0.0.1:8000"):
    """–ü—Ä–∏–º–µ—Ä —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π"""
    client = ReconServiceClient(server_url)
    
    try:
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π")
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
        process_id = client.send_pdf(pdf_path)
        
        # 2. –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        result = client.wait_for_processing(process_id)
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        debit_entries = result.get('debit', [])
        credit_entries = result.get('credit', [])
        
        print("üîß –ò–∑–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        
        # –ò–∑–º–µ–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π
        for i, entry in enumerate(debit_entries[:3]):
            old_value = entry['value']
            entry['value'] = round(float(old_value) * 1.1, 2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 10%
            print(f"   –î–µ–±–µ—Ç {i+1}: {old_value} ‚Üí {entry['value']}")
        
        for i, entry in enumerate(credit_entries[:3]):
            old_value = entry['value']
            entry['value'] = round(float(old_value) * 0.9, 2)  # –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 10%
            print(f"   –ö—Ä–µ–¥–∏—Ç {i+1}: {old_value} ‚Üí {entry['value']}")
        
        # 4. –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        output_path = client.fill_and_get_pdf(
            process_id, debit_entries, credit_entries, 
            f"modified_document_{process_id[:8]}.pdf"
        )
        
        print(f"üéâ –î–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_path}")
        return output_path
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return None

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python client.py <–ø—É—Ç—å_–∫_pdf> [url_—Å–µ—Ä–≤–µ—Ä–∞]")
        print("–ü—Ä–∏–º–µ—Ä: python client.py document.pdf")
        print("–ü—Ä–∏–º–µ—Ä: python client.py document.pdf http://192.168.1.100:8000")
        sys.exit(1)
    
    pdf_path = sys.argv[1]
    server_url = sys.argv[2] if len(sys.argv) > 2 else "http://127.0.0.1:8000"
    
    if not Path(pdf_path).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_path}")
        sys.exit(1)
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–≤–æ–∑–≤—Ä–∞—Ç —Ç–µ—Ö –∂–µ –¥–∞–Ω–Ω—ã—Ö)")
    print("2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π")
    
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): ").strip()
    
    if choice == "1":
        process_document(pdf_path, server_url)
    elif choice == "2":
        modify_values_example(pdf_path, server_url)
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")