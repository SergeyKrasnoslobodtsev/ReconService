import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import threading
from client_process import ReconServiceClient

class ReconServiceGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("ReconService Client")
        self.root.geometry("600x500")
        
        self.client = ReconServiceClient()
        self.current_process_id = None
        self.extraction_result = None
        
        self.setup_ui()
    
    def setup_ui(self):
        # URL —Å–µ—Ä–≤–µ—Ä–∞
        url_frame = ttk.Frame(self.root)
        url_frame.pack(fill="x", padx=10, pady=5)
        
        ttk.Label(url_frame, text="URL —Å–µ—Ä–≤–µ—Ä–∞:").pack(side="left")
        self.url_var = tk.StringVar(value="http://127.0.0.1:8000")
        url_entry = ttk.Entry(url_frame, textvariable=self.url_var, width=40)
        url_entry.pack(side="left", padx=5)
        
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
        file_frame = ttk.Frame(self.root)
        file_frame.pack(fill="x", padx=10, pady=5)
        
        ttk.Button(file_frame, text="–í—ã–±—Ä–∞—Ç—å PDF —Ñ–∞–π–ª", command=self.select_file).pack(side="left")
        self.file_var = tk.StringVar(value="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω")
        ttk.Label(file_frame, textvariable=self.file_var).pack(side="left", padx=10)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        button_frame = ttk.Frame(self.root)
        button_frame.pack(fill="x", padx=10, pady=10)
        
        ttk.Button(button_frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å", 
                  command=self.process_document).pack(side="left", padx=5)
        ttk.Button(button_frame, text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", 
                  command=self.fill_document, state="disabled").pack(side="left", padx=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = ttk.Progressbar(self.root, mode='indeterminate')
        self.progress.pack(fill="x", padx=10, pady=5)
        
        # –õ–æ–≥
        log_frame = ttk.Frame(self.root)
        log_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        ttk.Label(log_frame, text="–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π:").pack(anchor="w")
        
        self.log_text = tk.Text(log_frame, height=15)
        scrollbar = ttk.Scrollbar(log_frame, orient="vertical", command=self.log_text.yview)
        self.log_text.configure(yscrollcommand=scrollbar.set)
        
        self.log_text.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
    
    def log(self, message):
        self.log_text.insert(tk.END, message + "\n")
        self.log_text.see(tk.END)
        self.root.update()
    
    def select_file(self):
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª",
            filetypes=[("PDF files", "*.pdf"), ("All files", "*.*")]
        )
        if file_path:
            self.file_var.set(file_path)
            self.selected_file = file_path
    
    def process_document(self):
        if not hasattr(self, 'selected_file'):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª")
            return
        
        self.client.base_url = self.url_var.get().rstrip('/')
        
        def worker():
            try:
                self.progress.start()
                self.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
                process_id = self.client.send_pdf(self.selected_file)
                self.current_process_id = process_id
                self.log(f"‚úÖ PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. Process ID: {process_id}")
                
                # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
                result = self.client.wait_for_processing(process_id)
                self.extraction_result = result
                
                self.log("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                self.log(f"   –ü—Ä–æ–¥–∞–≤–µ—Ü: {result.get('seller', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
                self.log(f"   –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {result.get('buyer', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
                self.log(f"   –ó–∞–ø–∏—Å–µ–π –¥–µ–±–µ—Ç–∞: {len(result.get('debit', []))}")
                self.log(f"   –ó–∞–ø–∏—Å–µ–π –∫—Ä–µ–¥–∏—Ç–∞: {len(result.get('credit', []))}")
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
                self.root.after(0, lambda: self.root.children['!frame3'].children['!button2'].configure(state="normal"))
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            finally:
                self.progress.stop()
        
        threading.Thread(target=worker, daemon=True).start()
    
    def fill_document(self):
        if not self.current_process_id or not self.extraction_result:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç")
            return
        
        def worker():
            try:
                self.progress.start()
                self.log("üìù –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...")
                
                debit_entries = self.extraction_result.get('debit', [])
                credit_entries = self.extraction_result.get('credit', [])
                # debit_entries[3]['value'] = "ntcnsakdlaasdjlad"  # –ü—Ä–∏–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –¥–µ–±–µ—Ç–∞
                output_path = self.client.fill_and_get_pdf(
                    self.current_process_id, debit_entries, credit_entries
                )
                
                self.log(f"üéâ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n{output_path}")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            finally:
                self.progress.stop()
        
        threading.Thread(target=worker, daemon=True).start()
    
    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    app = ReconServiceGUI()
    app.run()